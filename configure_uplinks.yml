---
- name: Configure uplinks from ESXi host
  hosts: "{{ apic }}"
  connection: local
  gather_facts: no
  vars_files:
    - ./vars/configure_uplinks_vars.yml
    - ./credentials/aci_credentials.yml


  tasks:

    - name: Get available leaf switch pairs
      #GET {{apic}}/node/class/fabricNodePEp.json
      aci_switch_policy_vpc_protection_group:
        host: "{{ inventory_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        validate_certs: no
        state: query
      register: leaf_switch_pair_result

    - name: Print Query Results
      debug:
        var: leaf_switch_pair_result

    # need to search
    # leaf_switch_pair_result.current[]
    # for all the fabricExplicitGEp objects.

    # for each one

    - name: Get a list of all the leaf switch nodes
      aci_rest:
        host: "{{ inventory_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        method: get
        path: /api/node/class/fabricNodePEp.json
        validate_certs: no
      register: all_nodes

    - name: Print node list results
      debug: 
        var: all_nodes
#
#    - name: Get a list of open ports on the switch pairs
#      #GET {{apic}}/node/class/infraHPortS.json?query-target-filter=and(wcard(infraHPortS.dn,"{{node_id}}"),eq(infraPortBlk.descr, "open"))&query-target=subtree&rsp-subtree=children&target-subtree-class=infraPortBlk
#      aci_access_port_to_interface_policy_leaf_profile:
#        host: "{{ inventory_hostname }}"
#        username: "{{ aci_username }}"
#        password: "{{ aci_password }}"
#        leaf_interface_profile:
#        access_port_selector:
#        leaf_port_blk:
#        leaf_port_blk_description: open
#        from_port:
#        to_port:
#        state: query
#      register: open_port_result
#
#    - name: Print Query Results
#      debug:
#        var: open_port_result
#
    # TODO
    #- name: Choose open ports to Configure

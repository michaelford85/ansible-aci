---
- name: Configure uplinks from ESXi host
  hosts: "{{ apic }}"
  connection: local
  gather_facts: no
  vars_files:
    - ./vars/configure_uplinks_vars.yml
    - ./credentials/aci_credentials.yml
  vars:
    leaf_switches: []
    selected_ports: []

  tasks:


#### 1) Get the available leaf switch pairs ####
      #endpoint: https://{{ inventory_hostname }}/api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccPortP&query-target-filter=not(wcard(polUni.dn, "__ui_"))&target-subtree-class=infraAccPortP&query-target=subtree
    - name: Query for all leaf switches
      aci_rest:
        host: "{{ inventory_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        method: get
        path: /api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccPortP&query-target-filter=not(wcard(polUni.dn, "__ui_"))&target-subtree-class=infraAccPortP&query-target=subtree
        output_level: debug
        validate_certs: no
      register: leaf_switches_result

    # - name: Print leaf switch nodes
    #   debug:
    #     var: leaf_switches_result

    #The leaf_switches variable indicates what leaf switches are in the topology
    - name: Set Leaf Switches fact
      set_fact:
        leaf_switches: "{{ leaf_switches }} + [ '{{ item | regex_replace('[^0-9]+', '') }}' ]"
      loop: "{{leaf_switches_result | json_query('imdata[*].infraAccPortP.attributes.name') }}"

    # - name: Print Leaf Switches fact
    #   debug:
    #     var: leaf_switches


#### 2) Get a list of open ports on the switch pairs ####
    - name: Delete any existing open port variable file
      file:
        path: "{{ playbook_dir }}/vars/open_ports.yml"
        state: absent

      #endpoint: https://{{ inventory_hostname }}/api/node/class/infraHPortS.json?query-target-filter=and(wcard(infraHPortS.dn,"202"),eq(infraPortBlk.descr, "open"))&query-target=subtree&rsp-subtree=children&target-subtree-class=infraPortBlk
      #NOTE: For each switch, this task appends the open port objects to leaf_interface_profile_result
    - name: Query for all open ports
      aci_rest:
        host: "{{ inventory_hostname }}"
        username: "{{ aci_username }}"
        password: "{{ aci_password }}"
        path: "/api/node/class/infraHPortS.json?query-target-filter=and(wcard(infraHPortS.dn, \"{{ item | regex_replace('[^0-9]+', '') }}\"),eq(infraPortBlk.descr, \"open\"))&query-target=subtree&rsp-subtree=children&target-subtree-class=infraPortBlk"
        method: get
        output_level: debug
        validate_certs: no
      register: leaf_interface_profile_result
      loop: "{{leaf_switches_result | json_query('imdata[*].infraAccPortP.attributes.name') }}"


    # - name: Print Leaf Interface Result
    #   debug:
    #     var: leaf_interface_profile_result

    - name: Copy leaf interface profile results to file
      copy:
        content: "{{ leaf_interface_profile_result | to_nice_json }}"
        dest: open_ports.txt

    - name: Convert open_ports.txt file to list variable
      shell: "cat ./open_ports.txt"
      register: port_file_lines

    - name: Populate open_ports.yml variable file from template
      template:
        src: ./templates/open_ports.j2
        dest: ./vars/open_ports.yml

    - name: Remove extraneous switch text
      replace:
        regexp: 'prof-'
        replace: ''
        backup: no
        path: ./vars/open_ports.yml

    - name: Remove extraneous port text
      replace:
        regexp: '-IfSel'
        replace: ''
        backup: no
        path: ./vars/open_ports.yml

    - name: Include open_ports variable for processing
      include_vars:
        file: ./vars/open_ports.yml

    - name: confirm open_ports variable
      debug:
        var: open_ports

    - name: Delete open_ports.txt as it is no longer needed
      file:
        path: ./open_ports.txt
        state: absent

#### 3) User must choose switch pair and interfaces to configure ####
#TODO: In production, the open_ports variable will be made available in SNOW.
#For this POC, we will simply choose the first available ports from the variable file
    - name: Delete any existing selected port variable file
      file:
        path: "{{ playbook_dir }}/vars/selected_ports_{{ item }}.yml"
        state: absent
      loop: "{{ leaf_switches }}"

    # - name: Choose first two available ports from each switch in the pair
    #   template:
    #     src: ./templates/selected_ports.j2
    #     dest: "./vars/selected_ports_{{ item }}.yml"
    #   loop: "{{ leaf_switches }}"

    - name: Include selected_ports variable for processing
      include_vars:
        file: "{{ playbook_dir }}/vars/selected_ports_{{ item }}.yml"
      loop: "{{ leaf_switches }}"

    #NOTE: Strictly here to show we got the values we wanted
    - name: confirm selected_ports variable
      debug:
        var: 'selected_ports_{{ item }}'
      loop: "{{ leaf_switches }}"

#### 4) User must choose the use-case ####
#TODO: In production, the use_case variable will be selected by the operator in SNOW.
#For this POC, we will simply populate the use_case variable with a survey
#The default value in the survey is use_case: vmkernel_bundled


#### 5.) User must provide the server name -->  {{server_name}}  ( convert to title-case ) ####

# {{apic}}/node/class/infraHPortS.json?query-target-filter=and(wcard(infraHPortS.dn,"{{node_id}}"),eq(infraPortBlk.descr, "open"))&query-target=subtree&rsp-subtree=children&target-subtree-class=infraPortBlk
